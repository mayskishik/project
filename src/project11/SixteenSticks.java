/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project11;

import static java.awt.image.ImageObserver.HEIGHT;
import static java.lang.Integer.max;
import static java.lang.Math.random;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import static project11.NineStick.alphabeta;
import static project11.NineStick.findDepth;
import static project11.NineStick.generateGameTree;

/**
 *
 * @author marah
 */

public class SixteenSticks extends javax.swing.JFrame {
    private final Random random = new Random();
     boolean flag1 =true;
     boolean flag2 =true;
     boolean flag3 =true;
     boolean flag4 =true;
     boolean flagcomputer =false;
     int clickrow1=0;
     int clickrow2=0;
     int clickrow3=0;
     int clickrow4=0;
     int sticksize=16;
     ArrayList<String> rowone = new ArrayList<String>();
     ArrayList<String> rowtwo = new ArrayList<String>();
     ArrayList<String> rowthree = new ArrayList<String>();
     ArrayList<String> rowfour = new ArrayList<String>();
     tree root =new tree();
    /**
     * Creates new form SixteenSticks
     */
    public SixteenSticks() {
        initComponents();
        for (int i=0;i<16;i++){
            if (i==0){
                rowone.add("Stick"+(i+1));
            }
            else if (i>0 & i<4){
                rowtwo.add("Stick"+(i+1));
            }
            else if (i>4 & i<9){ 
                rowthree.add("Stick"+(i+1));
            }
            else 
            rowfour.add("Stick"+i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Stick1 = new javax.swing.JLabel();
        Stick2 = new javax.swing.JLabel();
        Stick3 = new javax.swing.JLabel();
        Stick4 = new javax.swing.JLabel();
        Stick6 = new javax.swing.JLabel();
        Stick5 = new javax.swing.JLabel();
        Stick7 = new javax.swing.JLabel();
        Stick8 = new javax.swing.JLabel();
        Stick9 = new javax.swing.JLabel();
        row1 = new javax.swing.JLabel();
        row2 = new javax.swing.JLabel();
        row3 = new javax.swing.JLabel();
        home = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Stick11 = new javax.swing.JLabel();
        Stick12 = new javax.swing.JLabel();
        Stick13 = new javax.swing.JLabel();
        Stick14 = new javax.swing.JLabel();
        Stick15 = new javax.swing.JLabel();
        Stick10 = new javax.swing.JLabel();
        Stick16 = new javax.swing.JLabel();
        row4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        newgame = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/back1.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Stick1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, -1, -1));

        Stick2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, -1, -1));

        Stick3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, -1, -1));

        Stick4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, -1, -1));

        Stick6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));

        Stick5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, -1, -1));

        Stick7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, -1, -1));

        Stick8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, -1, -1));

        Stick9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick9, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, -1, -1));

        row1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/row1.png"))); // NOI18N
        row1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                row1MouseClicked(evt);
            }
        });
        jPanel1.add(row1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        row2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/row2.png"))); // NOI18N
        row2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                row2MouseClicked(evt);
            }
        });
        jPanel1.add(row2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        row3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/row3.png"))); // NOI18N
        row3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                row3MouseClicked(evt);
            }
        });
        jPanel1.add(row3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/hhhhhhh.png"))); // NOI18N
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeMouseClicked(evt);
            }
        });
        jPanel1.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/compPlay.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 390, -1, -1));

        Stick11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick11, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 310, -1, -1));

        Stick12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick12, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 310, -1, -1));

        Stick13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick13, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 310, -1, -1));

        Stick14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick14, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 310, -1, -1));

        Stick15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick15, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, -1, -1));

        Stick10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick10, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 310, -1, -1));

        Stick16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wood.png"))); // NOI18N
        jPanel1.add(Stick16, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 310, -1, -1));

        row4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/row4.png"))); // NOI18N
        row4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                row4MouseClicked(evt);
            }
        });
        jPanel1.add(row4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/goback.png"))); // NOI18N
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));

        newgame.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        newgame.setForeground(new java.awt.Color(255, 255, 255));
        newgame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/newGame.png"))); // NOI18N
        newgame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newgameMouseClicked(evt);
            }
        });
        jPanel1.add(newgame, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, -1, -1));
        newgame.setVisible(false);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/back1.jpg"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 510));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseClicked
        // TODO add your handling code here:
        int an=JOptionPane.showConfirmDialog(rootPane, " Are you sure to exit game?");
        if (an == 0){
             NewJFrame l = new NewJFrame();
             l.show();
             dispose();
        }
    }//GEN-LAST:event_homeMouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
       int an=JOptionPane.showConfirmDialog(rootPane, " Are you sure to exit game?");
        if (an == 0){
            NumOfSticklevel2 jf = new NumOfSticklevel2();
            jf.show();
            dispose();
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void row1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_row1MouseClicked
        // TODO add your handling code here:
         if (flag1 ==true){
             flag2=false;
             flag3=false;
             flag4=false;
             flagcomputer =false;
             switch (clickrow1){
                case 0: 
                    hideStick("Stick1");
                    clickrow1++;
                    break;
            }
                endgame();
        }
    }//GEN-LAST:event_row1MouseClicked

    private void row2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_row2MouseClicked
        // TODO add your handling code here:
        if (flag2 == true){
            flag1 =false;
            flag3=false;
            flag4=false;
            flagcomputer =false;
              switch (clickrow2){
                case 0: 
                    hideStick("Stick2");
                    clickrow2++;
                    break;
                case 1: 
                    hideStick("Stick3");
                    clickrow2++;
                    break;
                case 2: 
                    hideStick("Stick4");
                    clickrow2++;
                    break;
              }
              endgame();
        }
    }//GEN-LAST:event_row2MouseClicked

    private void row3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_row3MouseClicked
        // TODO add your handling code here:
         if (flag3 ==true){
            flag1 =false;
            flag2=false;
            flag4=false;
            flagcomputer =false;
            switch (clickrow3){
                case 0: 
                    hideStick("Stick5");
                    clickrow3++;
                    break;
                case 1: 
                    hideStick("Stick6");
                    clickrow3++;
                    break;
                case 2: 
                    hideStick("Stick7");
                    clickrow3++;
                    break;
                case 3: 
                    hideStick("Stick8");
                    clickrow3++;
                    break;
                case 4: 
                    hideStick("Stick9");
                    clickrow3++;
                    break;
                }
                endgame();
        }
    }//GEN-LAST:event_row3MouseClicked

    private void row4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_row4MouseClicked
        // TODO add your handling code here:
        if (flag4 ==true){
            flag1=false;
            flag2=false;
            flag3=false;
            flagcomputer =false;
            switch (clickrow4){
                case 0: 
                    hideStick("Stick10");
                    clickrow4++;
                    break;
                case 1: 
                    hideStick("Stick11");
                    clickrow4++;
                    break;
                case 2: 
                    hideStick("Stick12");
                    clickrow4++;
                    break;
                case 3: 
                    hideStick("Stick13");
                    clickrow4++;
                    break;
                case 4: 
                    hideStick("Stick14");
                    clickrow4++;
                    break;
                case 5: 
                    hideStick("Stick15");
                    clickrow4++;
                    break;
                case 6: 
                    hideStick("Stick16");
                    clickrow4++;
                    break;
                }
                endgame();
        }
    }//GEN-LAST:event_row4MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        flag1=true;
        flag2=true;
        flag3=true;
        flag4=true;
        if (flagcomputer){
            JOptionPane.showMessageDialog(rootPane, "It is your turn");
        }
        else {
            flagcomputer =true;
            int [] numofstick = {rowone.size(),rowtwo.size(),rowthree.size(),rowfour.size()};
            root= generateGameTree(numofstick);
            Object [] num = alphabeta(root,10,Integer.MIN_VALUE,Integer.MAX_VALUE,true);
            int bestValue = (int) num[0];
            tree bestMove = (tree)(num[1]);
            root=bestMove;
            int randomnum = random.nextInt(4) + 1;
            performComputerMove (randomnum,bestValue);
            }
            endgame();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void newgameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newgameMouseClicked
        // TODO add your handling code here:
        SixteenSticks jf = new SixteenSticks();
        jf.show();
        dispose();
    }//GEN-LAST:event_newgameMouseClicked

    private void performComputerMove(int randomnum,int num) {
        switch (randomnum) {
            case 1:
                if (rowone.size()>=num){
                    performMove(rowone, num);
                }
                else {
                    randomnum = random.nextInt(3) + 1;
                    performComputerMove(randomnum,num);
                }
                break;
            case 2:
                if (rowtwo.size()>=num){
                    performMove(rowtwo, num);
                }
                else { 
                    //randomnum =  random.nextBoolean() ? 1 : 3;
                    randomnum = random.nextInt(2) + 1;
                    performComputerMove(randomnum,num);
                }
                break;
            case 3:
                if (rowthree.size()>=num){
                    performMove(rowthree, num);
                }
                else { 
                    randomnum = 4;
                    performComputerMove(randomnum,num);
                    }
                break;
            case 4:
                   if (rowfour.size()>=num){
                   performMove(rowfour, num);
                }
                else { 
                    randomnum = random.nextInt(3) + 1;
                    performComputerMove(randomnum,num);
                    }
    } 
}

private void performMove(ArrayList<String> row,int num) {
    if (row.size() > 0 ) {
        int i=0;
        while (i<num){
            String s=row.get(i);
            hideStick(s);
            num--;
            }
        } else {
            int randomnum = random.nextInt(3) + 1;
        }
    }

    private void hideStick(String s) {
        switch (s) {
            case "Stick1":
                Stick1.setVisible(false);
                rowone.remove(s);
                row1.setVisible(false);
                break;
            case "Stick2":
                Stick2.setVisible(false);
                rowtwo.remove(s);
                break;
            case "Stick3":
                Stick3.setVisible(false);
                rowtwo.remove(s);
                break;
            case "Stick4":
                Stick4.setVisible(false);
                rowtwo.remove(s);
                row2.setVisible(false);
                break;
            case "Stick5":
                Stick5.setVisible(false);
                rowthree.remove(s);
                break;
            case "Stick6":
                Stick6.setVisible(false);
                rowthree.remove(s);
                break;
            case "Stick7":
                Stick7.setVisible(false);
                rowthree.remove(s);
                break;
            case "Stick8":
                Stick8.setVisible(false);
                rowthree.remove(s);
                break;
            case "Stick9":
                Stick9.setVisible(false);
                rowthree.remove(s);
                row3.setVisible(false);
                break;
            case "Stick10":
                Stick10.setVisible(false);
                rowfour.remove(s);
                break;
            case "Stick11":
                Stick11.setVisible(false);
                rowfour.remove(s);
                break;
            case "Stick12":
                Stick12.setVisible(false);
                rowfour.remove(s);
                break;
            case "Stick13":
                Stick13.setVisible(false);
                rowfour.remove(s);
                break;
            case "Stick14":
                Stick14.setVisible(false);
                rowfour.remove(s);
                break;
            case "Stick15":
                Stick15.setVisible(false);
                rowfour.remove(s);
                break;
            case "Stick16":
                Stick16.setVisible(false);
                rowfour.remove(s);
                row4.setVisible(false);
                break;
            }
        // Update common data structures
        }

    public void endgame(){
        Icon win = new javax.swing.ImageIcon(getClass().getResource("/icons/youwin.png"));
        Icon lose = new javax.swing.ImageIcon(getClass().getResource("/icons/youlose.png"));
        if (rowone.isEmpty() && rowtwo.isEmpty() && rowthree.isEmpty() && rowfour.isEmpty()){
            if (flagcomputer) JOptionPane.showMessageDialog(rootPane, " ", "", HEIGHT,win);
            else JOptionPane.showMessageDialog(rootPane, "", "", HEIGHT,lose); 
            jLabel1.setVisible(false);
            newgame.setVisible(true);
        }
    }
     
   public static tree generateGameTree(int[] initialHeaps) {
        tree root = new tree(initialHeaps);
        generateTree(root);
        return root;
    }
    private static void generateTree(tree node) {
        // Iterate over all heaps
        for (int i = 0; i < node.data.length; i++) {
            if (node.data[i] > 0) {
                // Try all possible moves by removing sticks from the current heap
                for (int remove = 1; remove <= node.data[i]; remove++) {
                    int[] newHeaps = node.data.clone();
                    newHeaps[i] -= remove;
                    tree child = new tree(newHeaps);
                    node.children.add(child);
                    generateTree(child); // Recursive call to continue generating the tree
                }
            }
        }
    }
   
   public static int heuristic( tree node ,boolean max){
       int nim = 0;
       for (int i = 0; i < node.children.size(); i++) {
            nim ^= node.data[i];
        }
        if ( !max ){
            if (nim == 0) {
                return 0;
            } else {
                return 1;
            }
        } else {
            if (nim == 0) {
                return 1;
            } else {
                return 0;
            }
        }
  }

    public static Object [] alphabeta(tree node, int depth, int alpha, int beta, boolean maximizingPlayer) {
        if (depth == 0 || node.children.isEmpty()) {
            // System.out.println("heuristic = "+heuristic( node, maximizingPlayer));
             return new Object []{heuristic( node,maximizingPlayer), node};
        }
        for (tree child : node.children) {
            child.visit=false;
        }
        tree bestChild = null;
        int bestValue;
         if (maximizingPlayer) {
            bestValue = Integer.MIN_VALUE;
            for (tree child : node.children) {
                Object [] result = alphabeta(child, depth - 1, alpha, beta, false);
                int evalScore = (int) result[0];
                tree childNode = (tree) result[1];

                if (evalScore > bestValue) {
                    child.visit= true;
                    bestValue = evalScore;
                    bestChild = childNode;
                }

                alpha = Math.max(alpha, evalScore);
                if (beta <= alpha) {
                    break;
                }
            }
        } else {
            bestValue = Integer.MAX_VALUE;
            for (tree child : node.children) {
                Object[] result = alphabeta(child, depth - 1, alpha, beta, true);
                int evalScore = (int) result[0];
                tree childNode = (tree) result[1];

                if (evalScore < bestValue) {
                    child.visit= true;
                    bestValue = evalScore;
                    bestChild = childNode;
                }

                beta = Math.min(beta, evalScore);
                if (beta <= alpha) {
                    break;
                }
            }
        }

        for (tree child : node.children) {
            if (child.visit) {
                bestChild = child;
            }
        }

        return new Object[]{bestValue, bestChild};
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SixteenSticks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SixteenSticks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SixteenSticks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SixteenSticks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SixteenSticks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Stick1;
    private javax.swing.JLabel Stick10;
    private javax.swing.JLabel Stick11;
    private javax.swing.JLabel Stick12;
    private javax.swing.JLabel Stick13;
    private javax.swing.JLabel Stick14;
    private javax.swing.JLabel Stick15;
    private javax.swing.JLabel Stick16;
    private javax.swing.JLabel Stick2;
    private javax.swing.JLabel Stick3;
    private javax.swing.JLabel Stick4;
    private javax.swing.JLabel Stick5;
    private javax.swing.JLabel Stick6;
    private javax.swing.JLabel Stick7;
    private javax.swing.JLabel Stick8;
    private javax.swing.JLabel Stick9;
    private javax.swing.JLabel home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel newgame;
    private javax.swing.JLabel row1;
    private javax.swing.JLabel row2;
    private javax.swing.JLabel row3;
    private javax.swing.JLabel row4;
    // End of variables declaration//GEN-END:variables
}
